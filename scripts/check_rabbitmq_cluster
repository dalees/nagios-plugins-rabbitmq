#!/usr/bin/env perl
#
# check_rabbitmq_cluster
#
# Uses the management APIs to check the number of servers in a cluster.
#
##############################################################################
# prologue
use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use Mojo::UserAgent;
use URI::Escape;
use JSON;
use Data::Dumper;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);


##############################################################################
# define and get the command line options.
#   see the command line option guidelines at
#   http://nagiosplug.sourceforge.net/developer-guidelines.html#PLUGOPTIONS


# Instantiate Nagios::Plugin object (the 'usage' parameter is mandatory)
my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to check server counts in the cluster.',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 15672
);
$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);
$p->add_arg(
    spec => 'warning|w=s',
    help => 
qq{-w, --warning=INTEGER,INTEGER
   Warning minumum thresholds specified in order of TOTAL,ONLINE.
   Specify -1 if no warning threshold.},
);

$p->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=INTEGER,INTEGER
   Critical minumum thresholds specified in order of TOTAL,ONLINE.
   Specify -1 if no critical threshold.},
);
$p->add_arg(spec => 'type|t=s',
    help => "Only consider node of a certain type (disc|mem|all) (default: all)",
    default => "all"
    );
$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);
$p->add_arg(spec => 'insecure|insecure!',
    help => "Enable insecure ssl mode. Disables checking of server certs. (default: false)",
    default => 0
);
$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);


# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options
my %warning;
if (defined $p->opts->warning) {
    my @warn_arg = split(',', $p->opts->warning);
    $p->nagios_die("You should specify two values for --warning argument") unless $#warn_arg == 1;

    $warning{'online'} = shift @warn_arg;
    $warning{'total'} = shift @warn_arg;
}

my %critical;
if (defined $p->opts->critical) {
    my @crit_arg = split(',', $p->opts->critical);
    $p->nagios_die("You should specify two values for --critical argument") unless $#crit_arg == 1;

    $critical{'online'} = shift @crit_arg;
    $critical{'total'} = shift @crit_arg;
}

my $nodetype;
my @valid_types = ['all', 'disc', 'mem'];
if ( defined $p->opts->type && $p->opts->type ~~ @valid_types ) {
    $nodetype = $p->opts->type;
}
else {
    $nodetype = 'all';
}

##############################################################################
# gather rabbitmq status info and make sense of it.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;

my $urlpath = "api/nodes";
my $auth = sprintf("%s:%s@", $p->opts->username, $p->opts->password);
my $url = sprintf("http%s://%s%s:%d/%s", ($p->opts->ssl ? "s" : ""), $auth, $hostname, $port, $urlpath);

my $ua = Mojo::UserAgent->new;
if ($p->opts->proxy) {
#    # Removed because proxy is not available in Precise package libmojolicious-perl
#    use Mojo::UserAgent::Proxy;
#    $ua = $ua->proxy(Mojo::UserAgent::Proxy->new);
#    # Detect proxy servers from environment
#    $ua->proxy->detect;

     # Precise version
     $ua->detect_proxy;
}
#$ua->request_timeout(5);

my $tx = $ua->get( $url );
my $res = $tx->res;

if ($res->code != 200) {
    # Deal with standard error conditions - make the messages more sensible
    if ($res->code == 400) {
        my $bodyref = decode_json $res->body;
        $p->nagios_exit(CRITICAL, $bodyref->{'reason'});
    }
    $res->code == 404 and $p->nagios_die(sprintf("404 not found: /%s", $urlpath));
    $res->code == 401 and $p->nagios_die(sprintf("Access refused: /%s", $urlpath));
    if ($res->code < 200 or $res->code > 400 ) {
        $p->nagios_exit(CRITICAL, "Received ".$res->status_line);
    }
}
my $contentref = $res->json;

my @online_servers;
my @offline_servers;
my @total_servers;

my %servers = ( 'online' => (), 'total' => () );

foreach my $bodyref ( @{$contentref} ) {
    if ( $nodetype ne 'all' and $bodyref->{'type'} ne $nodetype ) {
        next;
    }
    push(@total_servers, $bodyref->{'name'} );
    if ($bodyref->{'running'}) {
        push(@online_servers, $bodyref->{'name'} );
       # push(%servers->['running'], $bodyref->{'name'});
    } else {
        push(@offline_servers, $bodyref->{'name'} );
    }
}

# Check metrics of server totals.
my @metrics = ( "total", "online" );
for my $metric (@metrics) {
    # Append colon to warning levels to indicate minimum value.
    my $warning = undef;
    $warning = $warning{$metric}.":" if (defined $warning{$metric} and $warning{$metric} != -1);
    my $critical = undef;
    $critical = $critical{$metric}.":" if (defined $critical{$metric} and $critical{$metric} != -1);
    my $value = 0;
    if ( $metric eq "total" ) { $value = scalar(@total_servers); }
    elsif ( $metric eq "online" ) { $value = scalar(@online_servers); }
    #print sprintf("%s : %d\n", $metric, $value);
    my $code = $p->check_threshold(check => $value, warning => $warning, critical=> $critical);
    $p->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value));
}

# Tell nagios which servers appear offline.
if ( scalar(@offline_servers) gt 0 ) {
    $p->add_message(OK, sprintf("Offline: (%s)", join(',', @offline_servers)));
}
my ($code, $message) = $p->check_messages(join_all=>', ');
$p->nagios_exit(return_code => $code, message => $message);

=head1 NAME

check_rabbitmq_cluster - Nagios plugin using RabbitMQ management API to check count of servers in the cluster.

=head1 SYNOPSIS

check_rabbitmq_cluster [options] -H hostname

=head1 DESCRIPTION

Use the management interface of RabbitMQ to check count of servers in the cluster.

It uses Nagios::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 15672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item --pass

The password for the user (default: guest)

=back

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_cluster -H rabbit.example.com

This returns a standard Nagios result:

    RABBITMQ_CLUSTER OK - total OK (1) online OK (1)

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Nagios::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2014, Catalyst IT http://www.catalyst.net.nz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

Dale Smith <dale@catalyst-eu.net>
Based on work by James Casey <jamesc.000@gmail.com>

=cut

1;
